gruntCompileSvgTemplate = function(){

  var svg, pathway, shapesAvailable, markersAvailable;

  function setCTM(element, matrix) {
    var s = "matrix(" + matrix.a + "," + matrix.b + "," + matrix.c + "," + matrix.d + "," + matrix.e + "," + matrix.f + ")";
    element.setAttribute("transform", s);
  }

  function load(args, callback) {
    if (!args) {
      if (!args.svg) {
        return console.warn('Missing svg.');
      }
      if (!args.pathway) {
        return console.warn('Missing pathway.');
      }
      return console.warn('Missing required input parameter.');
    }
    var svg = args.svg;
    async.series([
      function(callback) {
        callback(null);
      }
    ],
    function(err, results) {
      callback();
    });
  }



  function generateSvgTemplate(callback) {
    var documentFragment = document.createDocumentFragment();
    var svg = d3.select(documentFragment).append('svg');



    async.parallel(
      {
        'svg': function(callback) {
          d3.xml(srcDirectoryUrl + 'views/pathway-template.svg', 'image/svg+xml', function(svg) {





            async.series(
              {
                'load': function(callback) {
                  d3.xml(srcDirectoryUrl + 'views/pathway-template.svg', 'image/svg+xml', function(svg) {
                    callback(null, svg);
                  });
                }
              }
            )





            callback(null, svg);
          });
        }
      },
      function(err, results) {
        results.svg.documentElement.setAttribute('style', 'display: none; ');
        results.svg.documentElement.setAttribute('width', '500px');
        results.svg.documentElement.setAttribute('height', '500px');
        var diagramContainer = results.html.querySelector('#diagram-container').appendChild(results.svg.documentElement)

        var oSerializer = new XMLSerializer();
        pathvisioNS['tmp/pathvisiojs.html'] = oSerializer.serializeToString(results.html);
        callback();
      }
    )
  }



  function compileTemplate(args, callbackOutside) {
    var pathvisioJsContainer, diagramContainer, uniformlyScalingShapesList;
    async.series([
      function(callback) {
        args.target.element.html(pathvisioNS['tmp/pathvisiojs.html']);
        pathvisioJsContainer = args.target.element.select('#pathvisiojs-container');
        diagramContainer = pathvisioJsContainer.select('#diagram-container')
        .attr('class', args.preserveAspectRatioValues.yAlign);

        svg = pathvisioJsContainer.select('#pathvisiojs-diagram')
        .attr('class', args.preserveAspectRatioValues.xAlign)
        //.attr('viewBox', '0 0 ' + args.target.width + ' ' + args.target.height)
        .attr('style', 'display: none; ');

        callback(null);
      },
      function(callback) {
        if (!!args.customMarkers) {
          pathvisiojs.view.pathwayDiagram.svg.edge.marker.loadAllCustom(svg, args.customMarkers, function() {
            callback(null);
          })
        }
        else {
          callback(null);
        }
      },
      function(callback) {
        if (!!args.customShapes) {
          pathvisiojs.view.pathwayDiagram.svg.node.shape.uniformlyScalingShape.loadAllCustom(svg, args.customShapes, function() {
            callback(null);
          })
        }
        else {
          callback(null);
        }
      },
      function(callback) {
        pathvisiojs.view.pathwayDiagram.svg.node.shape.uniformlyScalingShape.getUniformlyScalingShapesList(svg, function(data) {
          uniformlyScalingShapesList = data;
          callback(null);
        });
      },
      function(callback) {
        if (!!args.cssUrl) {
          d3.text(args.cssUrl, 'text/css', function(data) {
            var defs = svg.select('defs');
            var style = defs.append('style').attr('type', "text/css");
            style.text(data);
            callback(null);
          })
        }
        else {
          callback(null);
        }
      }
    ],
    function(err, results) {
      callbackOutside(svg, uniformlyScalingShapesList);
    });
  }

  return {
    load:load,
    generateSvgTemplate:generateSvgTemplate
  };
}();

